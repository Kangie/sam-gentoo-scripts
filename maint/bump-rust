#!/bin/bash
# TODO: could add guessed subdir into S in ebuild?
# TODO: handle licensing
. /lib/gentoo/functions.sh

ORIGINAL_PWD=$(pwd)

~/git/sam-gentoo-scripts/maint/bump-generic $@ || exit 1

cd ${1} || exit 1

pn=$(pwd | rev | cut -d/ -f1 | rev)
ebuild=${pn}-${2}.ebuild

# Now do the Rust-specific bits.
#
# 1. remove the CRATES stuff
einfo "Removing CRATES=..."
if grep -q "CRATES=" ${ebuild} ; then
	if grep -qe 'CRATES=".*"' ${ebuild} ; then
		sed -i -e '/CRATES=/d' ${ebuild} || exit 1
	else
		sed -i -e '/CRATES="/,/"/d' ${ebuild} || exit 1
	fi
fi

# ... but put in a dummy line for now.
# We can't do a blank one (eclass will die), so let's do ${P} which usually works.
sed -i -e '/^EAPI=.*/a\\nCRATES="${P}"' ${ebuild} || exit 1

# 2. Fetch!
einfo "Fetching ${1}-${2}"
ebuild ${ebuild} manifest || exit 1

# 3. Unpack then fetch Rust deps
einfo "Unpacking ${1}-${2}"

# (We want to own this place)
WORKDIR=$(mktemp -d || exit 1)
PORTAGE_USERNAME="$(whoami)" PORTAGE_WORKDIR_MODE="775" PORTAGE_TMPDIR="${WORKDIR}" ebuild ${ebuild} clean unpack || exit 1

cmd='CARGO_HOME="${PWD}"/cargo-tmp cargo fetch'
ebegin "Running '${cmd}'"
(
    cd "${WORKDIR}"/portage/${1}-${2}/work/${pn}-${2}/ || exit 1

    if [[ ! -f Cargo.toml ]] ; then
        ewarn "No Cargo.toml in $(pwd)!"
        ewarn "Guessing first top-level subdir with Cargo.toml?"
        dirs=$(find . -maxdepth 1 -type d -print)

        for dir in ${dirs[@]} ; do
            if [[ -f ${dir}/Cargo.toml ]] ; then
                einfo "Entering ${dir} which contains a Cargo.toml file"
                cd ${dir} || exit 1
            fi
        done || { eerror "Could not find any Cargo.toml in top-level subdirs either!" ; exit 1; }
    fi

    eval "${cmd}" || exit 1
) || { eend $? ; exit 1; }

ebegin "Creating CRATES variable"
(
    cd "${WORKDIR}"/portage/${1}-${2}/work/${pn}-${2}/ || exit 1

    # TODO: nullglob?
    crates=$(ls -1 cargo-tmp/registry/src/*)

    echo ${crates} > "${WORKDIR}"/crates-list
) || { eend $? ; exit 1; }

# Add CRATES back
cd ${ORIGINAL_PWD}/${1} || exit 1
einfo "Adding CRATES to ebuild"

# Drop the dummy line we added
sed -i -e '/CRATES=/d' ${ebuild} || exit 1

crates=$(<"${WORKDIR}"/crates-list)
# Get a new line at the end
crates+="\n"
# Dump our new CRATES into the ebuild
sed -i -e "/^EAPI=.*/a\\\nCRATES=\"\n$(printf '\\\t%s\\\n' ${crates[@]})\"" ${ebuild} || exit 1

einfo "Generating manifest"
ebuild ${ebuild} clean manifest || exit 1

einfo "All done."

