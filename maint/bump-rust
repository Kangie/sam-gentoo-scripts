#!/usr/bin/env bash
# TODO: could add guessed subdir into S in ebuild?
# TODO: handle licensing
. /lib/gentoo/functions.sh || { echo "Could not find gentoo-functions' functions.sh!" ; exit 1; }
. "$(pkg-config iwdevtools --variable=atomf)" || { eerror "Could not find iwdevtools' atomf library! Emerge app-portage/iwdevtools?" ; exit 1; }

if [[ ${BASH_SOURCE} == */* ]]; then
	SCRIPT_DIR=${BASH_SOURCE%/*}/
else
	SCRIPT_DIR=./
fi

ORIGINAL_PWD=$(pwd)

ewarn "DEPRECATION NOTICE: Please use app-portage/pycargoebuild instead if it works for your case!"

${SCRIPT_DIR}/bump-generic "$@" || {
	case $? in
		3)
			ewarn "Continuing as re-generation of CRATES may be desired."
			;;
		*)
			exit $?
			;;
	esac
}

cd ${1} || exit 1
atomset "${1}-${2}"

ebuild=${P}.ebuild

# Now do the Rust-specific bits.
#
# 1. remove the CRATES stuff
einfo "Removing CRATES=..."
if grep -q "CRATES=" ${ebuild} ; then
	if grep -qe 'CRATES=".*"' ${ebuild} ; then
		sed -i -e '/CRATES=/d' ${ebuild} || exit 1
	else
		sed -i -e '/CRATES="/,/"/d' ${ebuild} || exit 1
	fi
fi

# ... but put in a dummy line for now.
# We can't do a blank one (eclass will die), so let's do ${P} which usually works.
# (Can try ${P} if this fails for some reason)
sed -i -e '/^EAPI=.*/a\\nCRATES=" "' ${ebuild} || exit 1

# 2. Fetch!
einfo "Fetching ${P}"
ebuild ${ebuild} manifest || exit 1

# 3. Unpack then fetch Rust deps
einfo "Unpacking ${P}"

# (We want to own this place)
export PORTAGE_TMPDIR="$(mktemp -d)"
export PORTAGE_USERNAME="$(whoami)"
export PORTAGE_WORKDIR_MODE="775"
ebuild ${ebuild} clean unpack || exit 1

# We need to export these for use in the subshells :(
export D="${PORTAGE_TMPDIR}"/portage/${CATEGORY}/${PF}/image
export WORKDIR="${PORTAGE_TMPDIR}"/portage/${CATEGORY}/${PF}/work
# Borrowed from mgorny-dev-tools' pkgdiff
export S=$(sed -nr 's/^declare -x S="(.*)"/\1/p' "${PORTAGE_TMPDIR}"/portage/${CATEGORY}/${PF}/temp/environment)

cmd="CARGO_HOME=${WORKDIR}/distdir/cargo-tmp cargo fetch"
ebegin "Running '${cmd}'"
(
	cd "${S}" || exit 1

	if [[ ! -f Cargo.toml ]] ; then
		ewarn "No Cargo.toml in $(pwd)!"
		ewarn "Guessing first top-three-level subdir with Cargo.toml?"
		dirs=$(find . -maxdepth 3 -type d -print)

		for dir in ${dirs[@]} ; do
			if [[ -f ${dir}/Cargo.toml ]] ; then
				einfo "Entering ${dir} which contains a Cargo.toml file"
				cd ${dir} || exit 1
			fi
		done || { eerror "Could not find any Cargo.toml in top-three-level subdirs either!" ; exit 1; }
	fi

	eval "${cmd}" || exit 1
) || { eend $? ; exit 1; }

ebegin "Creating CRATES variable"
(
	cd "${S}" || exit 1

	# TODO: nullglob?
	crates=$(ls -1 "${WORKDIR}"/distdir/cargo-tmp/registry/src/*)
	test $? -gt 0 && exit 1

	echo ${crates} > "${WORKDIR}"/crates-list
) || { eend $? ; exit 1; }

# Add CRATES back
cd ${ORIGINAL_PWD}/${CATEGORY}/${PN} || exit 1
einfo "Adding CRATES to ebuild"

# Drop the dummy line we added
sed -i -e '/CRATES=/d' ${ebuild} || exit 1

crates=$(<"${WORKDIR}"/crates-list)
# Get a new line at the end
crates+="\n"
# Dump our new CRATES into the ebuild
sed -i -e "/^EAPI=.*/a\\\nCRATES=\"\n$(printf '\\\t%s\\\n' ${crates[@]})\"" ${ebuild} || exit 1

einfo "Generating manifest"
ebuild ${ebuild} clean manifest || exit 1

einfo "All done."
