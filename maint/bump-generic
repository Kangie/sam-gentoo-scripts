#!/usr/bin/env bash
# TODO: merge this with ebump somehow?
# Contraption to allow passing through indentation
old_RC_DEFAULT_INDENT=${RC_DEFAULT_INDENT}

. /lib/gentoo/functions.sh || { echo "Could not find gentoo-functions' functions.sh!" ; exit 1; }
. "$(pkg-config iwdevtools --variable=atomf)" || { eerror "Could not find iwdevtools' atomf library! Emerge app-portage/iwdevtools?" ; exit 1; }

RC_DEFAULT_INDENT=${old_RC_DEFAULT_INDENT:-${RC_DEFAULT_INDENT}}
[[ -n ${RC_DEFAULT_INDENT} ]] && eindent ${RC_DEFAULT_INDENT}

cleanup() {
	[[ -z ${RC_DEFAULT_INDENT} ]] && eoutdent ${RC_DEFAULT_INDENT}
}

trap cleanup EXIT

template_pkg=net-dns/dnsx

get_last_version() {
	local cpn=${1}
	local ver=${2}

	# Copied from other script (gbump)
	# Hack needed here because best_version doesn't respect --repo (maybe intentional?)
	# and w/o best_version, multiple versions may be returned.
	if [[ -z ${ver} ]] ; then
		last_version_cpv=( $(portageq ${PORTAGE_USE_REPO+--repo ${PORTAGE_USE_REPO}} "${cpn}") )
	else
		last_version_cpv=( $(portageq ${PORTAGE_USE_REPO+--repo ${PORTAGE_USE_REPO}} "<${cpn}-${ver}") )
	fi

	if [[ ${#last_version_cpv} -gt 1 ]] ; then
		last_version_pf=$(atomf "%f" ${last_version_cpv[-1]})
		echo ${last_version_pf}
	else
		last_version_pf=$(atomf "%f" ${last_version_cpv})
		echo ${last_version_pf}
	fi
}

atomset "${1}-${2}" || { eerror "atomset failed! Insufficient arguments? We need: ${0##*/} <CATEGORY/PN> <PV>" ; exit 1; }

if [[ -z ${PV} ]] ; then
	eerror "No version given!"
	exit 1
fi

if [[ ! -d profiles/ ]] ; then
	eerror "Please run from repository root!"
	exit 1
fi

[[ -n ${BUMP_GENERIC_QUIET} ]] || einfo "Bumping ${CATEGORY}/${PN} to ${PV}"

# Is it a new package?
if [[ ! -d ${CATEGORY}/${PN} ]] ; then
	einfo "${CATEGORY}/${PN} does not yet exist, using ${template_pkg} as template"

	mkdir -p ${CATEGORY}/${PN} || exit 1
	cd ${CATEGORY}/${PN} || exit 1

	last_version_p=$(get_last_version ${template_pkg})

	cp ../../${template_pkg}/${last_version_p}.ebuild ${P}.ebuild || exit 1

	[[ -n ${BUMP_GENERIC_QUIET} ]] || einfo "Created ${CATEGORY}/${PN}/${P}.ebuild from ${template_pkg}/${last_version_p}.ebuild. Please edit as needed."
elif [[ -f ${CATEGORY}/${PN}/${P}.ebuild ]] ; then
	# Does this version already exist?
	ewarn "${P}.ebuild already exists! Skipping creation."
	exit 3
else
	mkdir -p ${CATEGORY}/${PN} || exit 1
	cd ${CATEGORY}/${PN} || exit 1

	# Already exists
	last_version_p=$(get_last_version ${CATEGORY}/${PN} ${PV})

	if [[ -z ${last_version_p} ]] ; then
		# The package exists but no version matching the constraint
		# (e.g. <x-1.21.x) because it's new in a series and we're bumping
		# the old one (in this case, gstreamer introduced adaptivedemux in
		# 1.21.x and we're bumping 1.20.x).
		einfo "Skipping ${CATEGORY}/${PN}/${P}.ebuild because no ebuilds matched for origin/template."
		exit 0
	fi

	cp $(atomf "%n%v%r" ${last_version_p}).ebuild ${P}.ebuild || exit 1
	ekeyword ~all ${P}.ebuild || exit 1

	[[ -n ${BUMP_GENERIC_QUIET} ]] || einfo "Created ${CATEGORY}/${PN}/${P}.ebuild. Please edit as needed."
fi
