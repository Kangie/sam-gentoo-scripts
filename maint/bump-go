#!/usr/bin/env bash
# TODO: could add guessed subdir into S in ebuild?
# TODO: handle licensing
# TODO: handle where a vendor dir already exists
. /lib/gentoo/functions.sh || { echo "Could not find gentoo-functions' functions.sh!" ; exit 1; }
. "$(pkg-config iwdevtools --variable=atomf)" || { eerror "Could not find iwdevtools' atomf library! Emerge app-portage/iwdevtools?" ; exit 1; }

if [[ ${BASH_SOURCE} == */* ]]; then
	SCRIPT_DIR=${BASH_SOURCE%/*}/
else
	SCRIPT_DIR=./
fi

ORIGINAL_PWD=$(pwd)
# Make reproducible tarballs. go mod download does not preserve timestamps,
# so clobber them; sort inputfiles; set ownership to something Gentoo-neutral.
REPRODUCIBLE_TAR_ARGS="--mtime="${SOURCE_DATE_EPOCH:-1970-01-01}" --sort=name --owner=portage --group=portage"
# TODO: verify this doesn't interfere with reproducible tars?
XZ_OPT=${XZ_OPT-"-T0 -9"}
export XZ_OPT

${SCRIPT_DIR}/bump-generic "$@" || {
	case $? in
		3)
			ewarn "Continuing as re-generation of dep tarballs may be desired."
			;;
		*)
			exit $?
			;;
	esac
}

cd ${1} || exit 1
atomset "${1}-${2}"

ebuild=${P}.ebuild

# Now do the Go-specific bits.
#
# 1. sed out the dep tarball line if there is one, so we can fetch.
einfo "Sedding out 'deps' tarball line if exists"
sed -i -e "/^SRC_URI.*deps/ s/^/#/" ${ebuild} || exit 1

einfo "Sedding out 'EGO_SUM' lines if they exist"
if grep -q "EGO_SUM" ${ebuild} ; then
	if grep -qe 'EGO_SUM".*"' ${ebuild} ; then
		sed -i -e '/EGO_SUM/d' ${ebuild} || exit 1
	else
		sed -i -e '/EGO_SUM=(/,/)/d' ${ebuild} || exit 1
	fi

	sed -i -e '/EGO_SUM_SRC_URI/d' ${ebuild} || die
	sed -i -e '/go-module_set_globals/d' ${ebuild} || die

	# Add in our -deps line (commented)
	sed -i -e "/^SRC_URI=/a#SRC_URI+=\" \${P}-deps.tar.xz\"" ${ebuild} || exit 1
fi

# 2. Fetch!
einfo "Fetching ${P}"
ebuild ${ebuild} manifest || exit 1

# 3. Unpack then fetch Go deps
einfo "Unpacking ${P}"

# (We want to own this place)
export PORTAGE_TMPDIR="$(mktemp -d)"
export PORTAGE_USERNAME="$(whoami)"
export PORTAGE_WORKDIR_MODE="775"
ebuild ${ebuild} clean unpack || exit 1

# We need to export these for use in the subshells :(
export D="${PORTAGE_TMPDIR}"/portage/${CATEGORY}/${PF}/image
export WORKDIR="${PORTAGE_TMPDIR}"/portage/${CATEGORY}/${PF}/work
# Borrowed from mgorny-dev-tools' pkgdiff
export S=$(sed -nr 's/^declare -x S="(.*)"/\1/p' "${PORTAGE_TMPDIR}"/portage/${CATEGORY}/${PF}/temp/environment)

cmd='GOMODCACHE="${PWD}"/go-mod go mod download -modcacherw'
ebegin "Running '${cmd}'"
(
	cd "${S}" || exit 1

	if [[ ! -f go.mod ]] ; then
		ewarn "No go.mod in $(pwd)!"
		ewarn "Guessing first top-level subdir with go.mod?"
		dirs=$(find . -maxdepth 1 -type d -print)

		for dir in ${dirs[@]} ; do
			if [[ -f ${dir}/go.mod ]] ; then
				einfo "Entering ${dir} which contains a go.mod file"
				cd ${dir} || exit 1
			fi
		done || { eerror "Could not find any go.mod in top-level subdirs either!" ; exit 1; }
	fi

	eval "${cmd}" || exit 1
) || { eend $? ; exit 1; }

ebegin "Creating tarball"
(
	cd "${S}" || exit 1

	# Find the (sub)dir we used earlier, even if it was a subdir we guessed
	cd $(find . -maxdepth 2 -type d -name '*go-mod*' -print -quit || exit 1)/.. || exit 1

	tar ${REPRODUCIBLE_TAR_ARGS} -acf ${P}-deps.tar.xz go-mod || exit 1

	mv ${P}-deps.tar.xz $(portageq distdir)/ || exit 1
) || { eend $? ; exit 1; }

# 4. Undo the sed we did earlier to the ebuild
cd ${ORIGINAL_PWD}/${CATEGORY}/${PN} || exit 1
einfo "Unsedding deps line in ebuild"
sed -i -e "/^#SRC_URI.*deps/ s/^#//" ${ebuild} || exit 1

einfo "Generating manifest"
ebuild ${ebuild} clean manifest || exit 1

einfo "All done."
einfo "Dep tarball now at: $(portageq distdir)/${P}-deps.tar.xz!"
